Settings:
  Output files: "/home/mshu/GBS_96/S3_bowtie2/output.*.bt2l"
  Line rate: 7 (line is 128 bytes)
  Lines per side: 1 (side is 128 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /home/mshu/GBS_96/Refgenome/Pita_chr12.fasta
Building a LARGE index
Reading reference sizes
Warning: Encountered empty reference sequence
  Time reading reference sizes: 00:03:39
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:02:30
bmax according to bmaxDivN setting: 5133047918
Using parameters --bmax 3849785939 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 3849785939 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:15:04
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:02:41
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:05:44
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2.56652e+09 (target: 3849785938)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (3849785939) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 2018486656 for bucket 1
  (Using difference cover)
  Sorting block time: 00:35:10
Returning block of 2018486657 for bucket 1
Getting block 2 of 8
  Reserving size (3849785939) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 2659321370 for bucket 2
  (Using difference cover)
  Sorting block time: 00:48:24
Returning block of 2659321371 for bucket 2
Getting block 3 of 8
  Reserving size (3849785939) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 3512755351 for bucket 3
  (Using difference cover)
  Sorting block time: 01:05:32
Returning block of 3512755352 for bucket 3
Getting block 4 of 8
  Reserving size (3849785939) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 2163398558 for bucket 4
  (Using difference cover)
  Sorting block time: 00:38:43
Returning block of 2163398559 for bucket 4
Getting block 5 of 8
  Reserving size (3849785939) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 2787681973 for bucket 5
  (Using difference cover)
  Sorting block time: 00:50:50
Returning block of 2787681974 for bucket 5
Getting block 6 of 8
  Reserving size (3849785939) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 3464431751 for bucket 6
  (Using difference cover)
  Sorting block time: 01:03:52
Returning block of 3464431752 for bucket 6
Getting block 7 of 8
  Reserving size (3849785939) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 3757999643 for bucket 7
  (Using difference cover)
  Sorting block time: 01:10:00
Returning block of 3757999644 for bucket 7
Getting block 8 of 8
  Reserving size (3849785939) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 168116365 for bucket 8
  (Using difference cover)
  Sorting block time: 00:02:37
Returning block of 168116366 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 6422508137
fchr[G]: 10266610178
fchr[T]: 14111876630
fchr[$]: 20532191674
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 6935879294 bytes to primary EBWT file: /home/mshu/GBS_96/S3_bowtie2/output.1.bt2l
Wrote 10266095844 bytes to secondary EBWT file: /home/mshu/GBS_96/S3_bowtie2/output.2.bt2l
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 20532191674
    bwtLen: 20532191675
    sz: 5133047919
    bwtSz: 5133047919
    lineRate: 7
    offRate: 4
    offMask: 0xfffffffffffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 160
    ftabLen: 1048577
    ftabSz: 8388616
    offsLen: 1283261980
    offsSz: 10266095840
    lineSz: 128
    sideSz: 128
    sideBwtSz: 96
    sideBwtLen: 384
    numSides: 53469250
    numLines: 53469250
    ebwtTotLen: 6844064000
    ebwtTotSz: 6844064000
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 09:02:37
Reading reference sizes
Warning: Encountered empty reference sequence
  Time reading reference sizes: 00:02:41
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:02:17
  Time to reverse reference sequence: 00:00:17
bmax according to bmaxDivN setting: 5133047918
Using parameters --bmax 3849785939 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 3849785939 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:13:13
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:02:15
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:05:43
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2.56652e+09 (target: 3849785938)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (3849785939) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 3633996526 for bucket 1
  (Using difference cover)
  Sorting block time: 00:56:29
Returning block of 3633996527 for bucket 1
Getting block 2 of 8
  Reserving size (3849785939) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 2038214864 for bucket 2
  (Using difference cover)
  Sorting block time: 00:30:28
Returning block of 2038214865 for bucket 2
Getting block 3 of 8
  Reserving size (3849785939) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 2666456470 for bucket 3
  (Using difference cover)
  Sorting block time: 00:41:23
Returning block of 2666456471 for bucket 3
Getting block 4 of 8
  Reserving size (3849785939) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 3003116861 for bucket 4
  (Using difference cover)
  Sorting block time: 00:46:03
Returning block of 3003116862 for bucket 4
Getting block 5 of 8
  Reserving size (3849785939) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 2286361239 for bucket 5
  (Using difference cover)
  Sorting block time: 00:34:12
Returning block of 2286361240 for bucket 5
Getting block 6 of 8
  Reserving size (3849785939) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 1978512419 for bucket 6
  (Using difference cover)
  Sorting block time: 00:29:16
Returning block of 1978512420 for bucket 6
Getting block 7 of 8
  Reserving size (3849785939) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 2915911239 for bucket 7
  (Using difference cover)
  Sorting block time: 00:44:10
Returning block of 2915911240 for bucket 7
Getting block 8 of 8
  Reserving size (3849785939) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 2009622049 for bucket 8
  (Using difference cover)
  Sorting block time: 00:30:12
Returning block of 2009622050 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 6422508137
fchr[G]: 10266610178
fchr[T]: 14111876630
fchr[$]: 20532191674
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 6935879294 bytes to primary EBWT file: /home/mshu/GBS_96/S3_bowtie2/output.rev.1.bt2l
Wrote 10266095844 bytes to secondary EBWT file: /home/mshu/GBS_96/S3_bowtie2/output.rev.2.bt2l
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 20532191674
    bwtLen: 20532191675
    sz: 5133047919
    bwtSz: 5133047919
    lineRate: 7
    offRate: 4
    offMask: 0xfffffffffffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 160
    ftabLen: 1048577
    ftabSz: 8388616
    offsLen: 1283261980
    offsSz: 10266095840
    lineSz: 128
    sideSz: 128
    sideBwtSz: 96
    sideBwtLen: 384
    numSides: 53469250
    numLines: 53469250
    ebwtTotLen: 6844064000
    ebwtTotSz: 6844064000
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 07:33:52
